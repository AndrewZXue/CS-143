Zhouyang Xue
104629708
CS143 HW#2

PART I
---------------------------------------------------------------------
-- a)

SELECT 
	highway,
	area
FROM caltrans
WHERE text like '%IS CLOSED%' and (text like '%DUE TO SNOW%' or text like '%FOR THE WINTER%')
GROUP BY highway, area
ORDER BY highway DESC, area DESC
LIMIT 20;

+---------+-------------------------------------------------+
| highway | area                                            |
+---------+-------------------------------------------------+
| US395   | IN THE CENTRAL CALIFORNIA AREA & SIERRA NEVADA  |
| SR89    | IN THE NORTHERN CALIFORNIA AREA & SIERRA NEVADA |
| SR89    | IN THE CENTRAL CALIFORNIA AREA & SIERRA NEVADA  |
| SR88    | IN THE CENTRAL CALIFORNIA & SIERRA NEVADA       |
| SR4     | IN THE CENTRAL CALIFORNIA AREA                  |
| SR38    | IN THE SOUTHERN CALIFORNIA AREA                 |
| SR330   | IN THE SOUTHERN CALIFORNIA AREA                 |
| SR33    | IN THE SOUTHERN CALIFORNIA AREA                 |
| SR3     | IN THE NORTHERN CALIFORNIA AREA                 |
| SR270   | IN THE CENTRAL CALIFORNIA AREA & SIERRA NEVADA  |
| SR267   | IN THE NORTHERN CALIFORNIA AREA                 |
| SR203   | IN THE CENTRAL CALIFORNIA AREA & SIERRA NEVADA  |
| SR20    | IN THE NORTHERN CALIFORNIA AREA                 |
| SR2     | IN THE SOUTHERN CALIFORNIA AREA                 |
| SR18    | IN THE SOUTHERN CALIFORNIA AREA                 |
| SR172   | IN THE NORTHERN CALIFORNIA AREA                 |
| SR168   | IN THE CENTRAL CALIFORNIA AREA & SIERRA NEVADA  |
| SR158   | IN THE CENTRAL CALIFORNIA AREA & SIERRA NEVADA  |
| SR138   | IN THE SOUTHERN CALIFORNIA AREA                 |
| SR130   | IN THE CENTRAL CALIFORNIA AREA                  |
+---------+-------------------------------------------------+
20 rows in set (0.06 sec)


-- b)
-- Method 1: subquery

SELECT 
	highway,
	area,
	100*COUNT(*)/365 as percentage
FROM (
	SELECT 
		highway,area,DATE(reported)
	FROM caltrans
	WHERE text like '%IS CLOSED%' and (text like '%DUE TO SNOW%' or text like '%FOR THE WINTER%')
	GROUP BY highway, area, DATE(reported)
) closed
GROUP BY highway, area
ORDER BY 100*COUNT(*)/365 DESC
LIMIT 5;

+---------+-------------------------------------------------+------------+
| highway | area                                            | percentage |
+---------+-------------------------------------------------+------------+
| SR89    | IN THE NORTHERN CALIFORNIA AREA & SIERRA NEVADA |    66.3014 |
| SR120   | IN THE CENTRAL CALIFORNIA AREA & SIERRA NEVADA  |    61.6438 |
| SR203   | IN THE CENTRAL CALIFORNIA AREA & SIERRA NEVADA  |    61.3699 |
| SR108   | IN THE CENTRAL CALIFORNIA AREA & SIERRA NEVADA  |    55.6164 |
| SR4     | IN THE CENTRAL CALIFORNIA AREA                  |    54.7945 |
+---------+-------------------------------------------------+------------+
5 rows in set (0.07 sec)

-- Method 2: inner join

SELECT 
	caltrans.highway,
	caltrans.area,
	100*COUNT(DISTINCT DATE(caltrans.reported))/365 as percentage
FROM 
caltrans INNER JOIN
(
	SELECT 
		highway,area
	FROM caltrans
	WHERE text like '%IS CLOSED%' AND (text like '%DUE TO SNOW%' or text like '%FOR THE WINTER%')
	GROUP BY highway, area
) sub 
ON caltrans.highway = sub.highway AND caltrans.area = sub.area
WHERE text like '%IS CLOSED%' AND (text like '%DUE TO SNOW%' or text like '%FOR THE WINTER%')
GROUP BY caltrans.highway, caltrans.area
ORDER BY 100*COUNT(DISTINCT DATE(caltrans.reported))/365 DESC
LIMIT 5;

+---------+-------------------------------------------------+------------+
| highway | area                                            | percentage |
+---------+-------------------------------------------------+------------+
| SR89    | IN THE NORTHERN CALIFORNIA AREA & SIERRA NEVADA |    66.3014 |
| SR120   | IN THE CENTRAL CALIFORNIA AREA & SIERRA NEVADA  |    61.6438 |
| SR203   | IN THE CENTRAL CALIFORNIA AREA & SIERRA NEVADA  |    61.3699 |
| SR108   | IN THE CENTRAL CALIFORNIA AREA & SIERRA NEVADA  |    55.6164 |
| SR4     | IN THE CENTRAL CALIFORNIA AREA                  |    54.7945 |
+---------+-------------------------------------------------+------------+
5 rows in set (0.15 sec)


---------------------------------------------------------------------
PART II
---------------------------------------------------------------------

Natural Join is not a subset of Inner Join.
A natural join can be an inner join, but it can also be an outer join.
Therefore, this Venn Diagram is incorrect.


---------------------------------------------------------------------
PART III
---------------------------------------------------------------------
-- a)

SELECT
	trip_starts.trip_id, trip_starts.user_id, ifnull(TIMESTAMPDIFF(second, trip_starts.time, trip_ends.time), 86400) as elapsed
FROM trip_starts LEFT JOIN trip_ends
ON trip_starts.trip_id = trip_ends.trip_id and trip_starts.user_id = trip_ends.user_id
LIMIT 5;

+---------+---------+---------+
| trip_id | user_id | elapsed |
+---------+---------+---------+
|       0 |   20685 |      72 |
|       2 |   34808 |     179 |
|       3 |   25463 |   86400 |
|       4 |   26965 |      94 |
|       5 |     836 |      51 |
+---------+---------+---------+
5 rows in set (0.00 sec)

-- b)

SELECT
	trip_starts.trip_id, trip_starts.user_id, 1 + 0.15 * CEIL(ifnull(TIMESTAMPDIFF(second, trip_starts.time, trip_ends.time), 86400)/60) as price
FROM trip_starts LEFT JOIN trip_ends
ON trip_starts.trip_id = trip_ends.trip_id and trip_starts.user_id = trip_ends.user_id
LIMIT 5;
+---------+---------+--------+
| trip_id | user_id | price  |
+---------+---------+--------+
|       0 |   20685 |   1.30 |
|       2 |   34808 |   1.45 |
|       3 |   25463 | 217.00 |
|       4 |   26965 |   1.30 |
|       5 |     836 |   1.15 |
+---------+---------+--------+
5 rows in set (0.00 sec)

-- c)
SELECT
	user_id, SUM(price) as monthly_price
FROM(
	SELECT
		trip_starts.trip_id, trip_starts.user_id, trip_starts.time, LEAST(100.00, SUM(1 + 0.15 * CEIL(ifnull(TIMESTAMPDIFF(second, trip_starts.time, trip_ends.time), 86400)/60))) as price
	FROM trip_starts LEFT JOIN trip_ends
	ON trip_starts.trip_id = trip_ends.trip_id and trip_starts.user_id = trip_ends.user_id
	WHERE MONTH(DATE(trip_starts.time)) = 3
	GROUP BY trip_starts.user_id, trip_starts.trip_id
)subquery
WHERE MONTH(DATE(time)) = 3
GROUP BY user_id
LIMIT 5;

+---------+---------------+
| user_id | monthly_price |
+---------+---------------+
|       0 |        105.50 |
|       1 |          4.05 |
|       2 |        314.05 |
|       3 |         11.90 |
|       4 |        210.55 |
+---------+---------------+
5 rows in set (2.44 sec)

In particular, user id = 2 owes $314.05.

-- d)
Self-Left-Equi-Join
(trip_starts on the left side)

